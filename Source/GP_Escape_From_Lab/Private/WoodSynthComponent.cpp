// Fill out your copyright notice in the Description page of Project Settings.


#include "WoodSynthComponent.h"

float woodModesData[239][2] =
{
{183.032227, 0.293209},
{102.282715, 0.268964},
{56.524658, 0.183143},
{479.113770, 0.210693},
{559.863281, 0.129101},
{1464.257813, 0.179061},
{320.306396, 0.135397},
{3020.031738, 0.121727},
{255.706787, 0.134263},
{430.664063, 0.105958},
{363.372803, 0.110102},
{705.212402, 0.117138},
{950.152588, 0.118736},
{632.537842, 0.110444},
{831.719971, 0.114429},
{1092.810059, 0.114916},
{1370.050049, 0.091825},
{1168.176270, 0.117185},
{1598.840332, 0.100610},
{1025.518799, 0.081958},
{1830.322266, 0.092998},
{1999.896240, 0.097456},
{748.278809, 0.098120},
{2177.545166, 0.084346},
{901.702881, 0.075511},
{1211.242676, 0.078908},
{1733.422852, 0.073428},
{1545.007324, 0.093770},
{3200.372314, 0.079035},
{1265.075684, 0.093186},
{1310.833740, 0.095440},
{2317.510986, 0.082951},
{1911.071777, 0.079420},
{2118.328857, 0.080440},
{2495.159912, 0.085910},
{2974.273682, 0.067411},
{3631.036377, 0.061497},
{3784.460449, 0.063031},
{2928.515625, 0.067569},
{7092.498779, 0.071788},
{2360.577393, 0.076237},
{2072.570801, 0.071790},
{3967.492676, 0.068725},
{3515.295410, 0.077050},
{3434.545898, 0.055554},
{2767.016602, 0.056837},
{4758.837891, 0.067419},
{4382.006836, 0.050725},
{3574.511719, 0.059742},
{1418.499756, 0.044512},
{3369.946289, 0.049436},
{6414.202881, 0.061242},
{5900.097656, 0.055234},
{6494.952393, 0.065950},
{3068.481445, 0.055577},
{1644.598389, 0.044563},
{2581.292725, 0.044522},
{2419.793701, 0.041791},
{3262.280273, 0.047550},
{4314.715576, 0.064222},
{5652.465820, 0.061652},
{6169.262695, 0.060121},
{3706.402588, 0.046860},
{5227.185059, 0.048067},
{5011.853027, 0.054553},
{4131.683350, 0.044230},
{2250.219727, 0.039668},
{1954.138184, 0.047393},
{8091.101074, 0.056184},
{3849.060059, 0.044843},
{2812.774658, 0.044605},
{4705.004883, 0.056478},
{1776.489258, 0.037516},
{4425.073242, 0.051558},
{5822.039795, 0.054429},
{6042.755127, 0.038290},
{5410.217285, 0.054040},
{1687.664795, 0.026478},
{4527.355957, 0.042808},
{6567.626953, 0.042978},
{2880.065918, 0.035477},
{4863.812256, 0.050670},
{4212.432861, 0.040557},
{5558.258057, 0.047850},
{7851.544189, 0.046300},
{7221.697998, 0.035981},
{6287.695313, 0.040402},
{5176.043701, 0.034024},
{6352.294922, 0.041690},
{4933.795166, 0.044706},
{4059.008789, 0.037189},
{6987.524414, 0.046313},
{5943.164063, 0.037371},
{5106.060791, 0.033142},
{4468.139648, 0.031417},
{2664.733887, 0.028637},
{3313.421631, 0.038239},
{7926.910400, 0.044556},
{3154.614258, 0.033257},
{6925.616455, 0.043741},
{7367.047119, 0.032735},
{2713.183594, 0.035491},
{8276.824951, 0.031252},
{4613.488770, 0.032928},
{7412.805176, 0.035824},
{7143.640137, 0.035195},
{5760.131836, 0.035902},
{5297.167969, 0.027131},
{7638.903809, 0.041510},
{6801.800537, 0.028766},
{5499.041748, 0.028113},
{7321.289063, 0.039334},
{6610.693359, 0.032138},
{8629.431152, 0.039798},
{4255.499268, 0.027585},
{12750.347900, 0.040385},
{8319.891357, 0.030541},
{7760.028076, 0.033350},
{4656.555176, 0.026920},
{8473.315430, 0.036096},
{6680.676270, 0.024805},
{5453.283691, 0.034215},
{6861.016846, 0.033115},
{6099.279785, 0.029312},
{10933.483887, 0.032837},
{6753.350830, 0.028897},
{10602.410889, 0.027887},
{5606.707764, 0.026737},
{3910.968018, 0.027981},
{9054.711914, 0.035094},
{10979.241943, 0.024145},
{5057.611084, 0.024276},
{12884.930420, 0.033983},
{8045.343018, 0.023895},
{7520.471191, 0.025891},
{10492.053223, 0.022897},
{5714.373779, 0.026737},
{10239.038086, 0.030385},
{12287.384033, 0.031986},
{8231.066895, 0.031417},
{11619.854736, 0.031486},
{7703.503418, 0.030290},
{4801.904297, 0.022423},
{6231.170654, 0.021353},
{14435.321045, 0.025521},
{9278.118896, 0.030822},
{8171.850586, 0.027457},
{7455.871582, 0.025972},
{5986.230469, 0.019729},
{12575.390625, 0.026926},
{9611.883545, 0.024894},
{11070.758057, 0.030805},
{9218.902588, 0.028943},
{5359.075928, 0.020183},
{4010.559082, 0.021871},
{11156.890869, 0.028529},
{7975.360107, 0.021551},
{7585.070801, 0.020069},
{11907.861328, 0.025629},
{9749.157715, 0.023380},
{13067.962646, 0.027634},
{11848.645020, 0.027634},
{14203.839111, 0.019088},
{14801.385498, 0.025560},
{11501.422119, 0.026741},
{8957.812500, 0.024166},
{7264.764404, 0.019705},
{14583.361816, 0.025697},
{12513.482666, 0.022371},
{10758.526611, 0.027307},
{14136.547852, 0.022932},
{12206.634521, 0.026817},
{14938.659668, 0.020224},
{11232.257080, 0.026220},
{12096.276855, 0.025165},
{9173.144531, 0.026933},
{13345.202637, 0.019646},
{13549.768066, 0.026206},
{8427.557373, 0.019884},
{9921.423340, 0.023007},
{13504.010010, 0.019905},
{13775.866699, 0.023721},
{10360.162354, 0.019378},
{8362.957764, 0.018818},
{14058.489990, 0.023853},
{9792.224121, 0.023150},
{8529.840088, 0.018487},
{13969.665527, 0.017255},
{10556.652832, 0.015689},
{8852.838135, 0.021612},
{13442.102051, 0.015698},
{14343.804932, 0.018354},
{9466.534424, 0.020756},
{7038.665771, 0.015120},
{9964.489746, 0.014583},
{10069.464111, 0.020058},
{10685.852051, 0.020552},
{9563.433838, 0.021266},
{12701.898193, 0.019180},
{14012.731934, 0.017492},
{10419.378662, 0.018966},
{14685.644531, 0.019599},
{14532.220459, 0.019547},
{8780.163574, 0.016646},
{9512.292480, 0.021098},
{10282.104492, 0.020512},
{13622.442627, 0.019159},
{12142.034912, 0.013976},
{9856.823730, 0.013632},
{10131.372070, 0.017899},
{8912.054443, 0.016562},
{8572.906494, 0.019400},
{13896.990967, 0.017455},
{14246.905518, 0.016509},
{9377.709961, 0.019561},
{12793.414307, 0.016285},
{13294.061279, 0.018394},
{9698.016357, 0.016746},
{11792.120361, 0.016460},
{10825.817871, 0.012566},
{12459.649658, 0.016992},
{11399.139404, 0.017646},
{13711.267090, 0.013356},
{9420.776367, 0.012818},
{10882.342529, 0.010910},
{11980.535889, 0.011585},
{11280.706787, 0.014315},
{13216.003418, 0.014564},
{14298.046875, 0.011804},
{11326.464844, 0.012814},
{13156.787109, 0.013838},
{11695.220947, 0.013463},
{11022.308350, 0.010796},
{11574.096680, 0.010332},
{14478.387451, 0.009725},
{13665.509033, 0.011928},
{13851.232910, 0.010315},
{12330.450439, 0.008004},
{14626.428223, 0.011214},
};

std::random_device UWoodSynthComponent::rd;
std::default_random_engine UWoodSynthComponent::dre(rd());
std::uniform_real_distribution<float> UWoodSynthComponent::urd(-1.0f, 1.0f);
std::uniform_real_distribution<float> UWoodSynthComponent::urdFixed(1.0f, 4.0f);
const int UWoodSynthComponent::MODES_NUMBER = 239;
const float UWoodSynthComponent::SHORTEST_FREQ = 56.524658;
const float UWoodSynthComponent::BASE_RELEASE = 650.0f;


bool UWoodSynthComponent::Init(int32& SampleRate)
{
	NumChannels = 1;
	FString tempProjectContentPath = FPaths::ProjectContentDir();
	FString fileFullPath = FPaths::ConvertRelativePathToFull(tempProjectContentPath);
	FString findWavName = "Bullet_Impact_Wood.wav";
	std::string filePath = TCHAR_TO_UTF8(*fileFullPath);
	fileFullPath += findWavName;
	filePath = TCHAR_TO_UTF8(*fileFullPath);
	bool isSuccess = sourceSound.load(filePath);
	if (isSuccess)
	{
		GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, "Load Success");
	}
	else
	{
		GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, "Load failed");
		GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, fileFullPath);
	}

	originEnv.setAttack(15.0f);
	originEnv.setDecay(35.0f);
	originEnv.setSustain(200.0f);
	originEnv.setRelease(BASE_RELEASE * 1.5f);

	for (int i = 0; i < MODES_NUMBER; ++i)
	{
		modesEnv[i].setAttack(15.0f);
		modesEnv[i].setDecay(35.0f);
		modesEnv[i].setSustain(100.0f);
		modesEnv[i].setRelease(BASE_RELEASE / (woodModesData[i][0] / SHORTEST_FREQ) / 1.5f);

		if (urd(dre) >= 0.0f)
		{
			fixedGain[i] = woodModesData[i][1] / urdFixed(dre);
		}
		else
		{
			fixedGain[i] = woodModesData[i][1] * urdFixed(dre);
			if (fixedGain[i] >= 1.0f)
			{
				fixedGain[i] = fixedGain[i] / 3;
			}
		}
	}

	GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, FString::FromInt(SampleRate));
	isPlayOnce = true;
	return true;
}

int32 UWoodSynthComponent::OnGenerateAudio(float* OutAudio, int32 NumSamples)
{
	// Perform DSP operations here
	for (int32 Sample = 0; Sample < NumSamples; ++Sample)
	{
		if (isPlayOnce)
		{
			originEnv.trigger = 1.0f;
			for (int i = 0; i < MODES_NUMBER; ++i)
			{
				modesEnv[i].trigger = 1.0f;
			}
			isPlayOnce = false;
			GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, "envelope on");
		}
		else
		{
			originEnv.trigger = 0.0f;
			for (int i = 0; i < MODES_NUMBER; ++i)
			{
				modesEnv[i].trigger = 0.0f;
			}
		}
		float out = 0.0f;
		float sourceSoundValue = sourceSound.play();
		float decayVolume[MODES_NUMBER] = { 0, };
		for (int i = 0; i < MODES_NUMBER; ++i)
		{
			decayVolume[i] = modesEnv[i].adsr(1, modesEnv[i].trigger);
			out += (originOsc[i].sinewave(woodModesData[i][0]) * woodModesData[i][1]) * decayVolume[i];
		}

		sourceSoundValue *= originEnv.adsr(1, originEnv.trigger);

		auto residual = sourceSoundValue - out;
		auto fixedOut = 0.0f;
		for (int i = 0; i < MODES_NUMBER; ++i)
		{
			fixedOut += (fixedOsc[i].sinewave(woodModesData[i][0]) * fixedGain[i]) * decayVolume[i];
		}

		OutAudio[Sample] = (fixedOut + residual);

	}

	return NumSamples;
}

void UWoodSynthComponent::SetFrequency(const float InFrequencyHz)
{
#if SYNTHCOMPONENT_EX_OSCILATOR_ENABLED
	// Use this protected base class method to push a lambda function which will safely execute in the audio render thread.
	SynthCommand([this, InFrequencyHz]()
	{
		Osc.SetFrequency(InFrequencyHz);
		Osc.Update();
	});
#endif // SYNTHCOMPONENT_EX_OSCILATOR_ENABLED
}